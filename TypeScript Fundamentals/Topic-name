# Base Type & Primitives

In TypeScript, the term "base type" refers to the fundamental types that are built-in to the language. These are also known as "primitives." Primitives include types like number, string, Boolean, null, undefined, and symbol. They are the basic building blocks for creating more complex data structures in TypeScript.


# Array and Object Types

In TypeScript, an array is a data structure that stores a collection of elements of the same type. It is denoted by square brackets, like [1, 2, 3]. 

An object, on the other hand, is a data structure that stores key-value pairs. It is denoted by curly braces, like { name: "John", age: 25 }.


## Type Inference
Type inference in TypeScript is a feature that allows the compiler to automatically determine the type of a variable based on its initial value. This means that you don't always have to explicitly specify the type of a variable when declaring it. TypeScript will analyze the value assigned to the variable and infer its type accordingly. This can help reduce the amount of code you need to write and make your code more concise and readable. However, it's important to note that type inference is not always possible or accurate in all cases, so it's still recommended to explicitly specify types when necessary for clarity and correctness.


## Working with Unions Types
Union types in TypeScript allow you to define a variable that can hold values of different types. For example, you can define a variable with a union type of `number | string` to indicate that it can store either a number or a string. This gives you flexibility when working with variables that can have multiple possible types. You can use type guards or type assertions to perform type-specific operations on variables with union types. It's a powerful feature that helps make your code more flexible and adaptable. 


## Assigning Type Aliases

In TypeScript, you can use type aliases to create custom names for types. This can make your code more readable and maintainable, especially when working with complex or repetitive types. To define a type alias, you can use the `type` keyword followed by the desired name and the type definition. For example, you can create a type alias for a person object like this:

```
type Person = {
  name: string;
  age: number;
  address: string;
};
```

After defining the type alias, you can use it to declare variables or function parameters:

```
const person: Person = {
  name: "John",
  age: 25,
  address: "123 Main St",
};
```

This way, you can refer to the `Person` type instead of repeating the object structure every time you need it. Type aliases can also be used with union types, intersection types, and more. 

## Function and Function Types

In TypeScript, you can define functions using the `function` keyword followed by the function name, parameters, and return type. For example:

```typescript
function add(a: number, b: number): number {
  return a + b;
}
```

In this example, the `add` function takes two parameters of type `number` and returns a value of type `number`.

You can also define function types using the `type` keyword or the `interface` keyword. Function types describe the signature of a function, including the parameter types and the return type. For example:

```typescript
type MathOperation = (a: number, b: number) => number;
```

Here, the `MathOperation` type represents a function that takes two parameters of type `number` and returns a value of type `number`.

You can then use the defined function type to declare variables or function parameters:

```typescript
const multiply: MathOperation = (a, b) => a * b;
```

In this case, the `multiply` variable is assigned a function that multiplies two numbers.

Function types provide a way to define and enforce the structure of functions, making your code more robust and maintainable. Let me know if you have any further questions about functions or function types in TypeScript!

## Understanding Generics

Generics in TypeScript allow you to create reusable components that can work with different types. They provide a way to define placeholders for types that can be specified when using the component.

For example, let's say you have a function that reverses an array:

```typescript
function reverseArray<T>(array: T[]): T[] {
  return array.reverse();
}
```

Here, the `<T>` syntax indicates that `T` is a generic type parameter. It can be replaced with any type when calling the function. The function takes an array of type `T` and returns an array of the same type.

You can then use the `reverseArray` function with different types:

```typescript
const numbers = [1, 2, 3, 4, 5];
const reversedNumbers = reverseArray(numbers);

const names = ["Alice", "Bob", "Charlie"];
const reversedNames = reverseArray(names);
```

In the first example, `T` is inferred as `number`, so `reverseArray` returns an array of numbers. In the second example, `T` is inferred as `string`, so `reverseArray` returns an array of strings.

Generics provide flexibility and type safety by allowing you to write code that can work with multiple types. They are commonly used in libraries and frameworks to create reusable and type-safe components.


# Classes and TypeScript

In TypeScript, classes are used to create objects that have properties and methods. They provide a way to define a blueprint for creating objects with specific characteristics.

Here's an example of defining a class in TypeScript:

```typescript
class Person {
  name: string;
  age: number;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }

  sayHello() {
    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
  }
}
```

In this example, we define a `Person` class with `name` and `age` properties. The `constructor` method is used to initialize these properties when creating a new `Person` object. The `sayHello` method logs a greeting message to the console using the object's `name` and `age` properties.

To create an instance of the `Person` class, we can do the following:

```typescript
const person = new Person("Alice", 25);
person.sayHello(); // Output: Hello, my name is Alice and I am 25 years old.
```

Classes in TypeScript can also have access modifiers like `public`, `private`, and `protected` to control the visibility and accessibility of properties and methods.

Classes provide a way to organize and structure your code, making it easier to create and work with objects. They are a fundamental concept in object-oriented programming. 

## Working with interfaces

Working with interfaces in TypeScript is a great way to define the structure and shape of objects. You can use interfaces to enforce a specific set of properties and their types that an object must have.

For example, let's say we have an interface called `Person`:

```typescript
interface Person {
  name: string;
  age: number;
  gender: string;
}

function greet(person: Person) {
  console.log(`Hello, ${person.name}! You are ${person.age} years old.`);
}

const john: Person = {
  name: "John Smith",
  age: 30,
  gender: "male",
};

greet(john); // Output: Hello, John Smith! You are 30 years old.
```

In this example, the `Person` interface defines that a person object must have a `name` property of type `string`, an `age` property of type `number`, and a `gender` property of type `string`. The `greet` function takes in a `Person` object as its parameter and logs a greeting message using the person's name and age.

By using interfaces, you can ensure that objects adhere to a specific structure and avoid potential errors in your code. Interfaces are especially useful when working with complex data structures or when defining contracts for APIs.

Let me know if you have any specific questions about working with interfaces in TypeScript!

## 






>
